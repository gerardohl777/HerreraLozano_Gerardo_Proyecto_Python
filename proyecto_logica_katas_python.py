# -*- coding: utf-8 -*-
"""Proyecto_Logica_Katas_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s5Mo2g5-OY9HLiGh5nDHre25cfMHvWIZ

# PROYECTO LÓGICA: Katas de Python

### 1- Escribe una función que reciba una cadena de texto como parámetro y devuelva un diccionario con las frecuencias de cada letra en la cadena. Los espacios no deben ser considerados.
"""

def recibirTexto(cadena):
    """
    Función que cuenta todas las letras de una cadena y nos dara un diccionario con la frecuencia de cada letra.
    Args:
        cadena(str): Cadena de texto dada como parametro.
    Returns:
        frecuencia de cada letra.
    """
    frecuencia = {}
    for letra in cadena.replace(" ", ""):
        letra = letra.lower()
        frecuencia[letra] = frecuencia.get(letra, 0) + 1
    return frecuencia

cadena = "Hola que tal me llamo Gerardo"

recibirTexto(cadena)

"""### 2- Dada una lista de números, obtén una nueva lista con el doble de cada valor. Usa la función *map()*"""

lista_1 = (1, 2, 3, 4, 5)

def dobleValor (lista_1):
    """
    Función que recibirá una lista de números, si no la recibe nos devolvera un ValuError.
    Si la recibe, mos devolvera el resultado de la lista_1 con el doble de cada valor de la lista.
    Args:
        lista_1(int): lista de enteros dada como parametro.
    Returns:
        La lista_1 con el doble del valor para cada elemnto de la lista.
    """
    if not lista_1:
        raise ValueError("ERROR, su lista esta vacia.")
    else:
        return lista_1 + lista_1
resultado = list(map(dobleValor, lista_1))

lista_2 = resultado
print(lista_2)

"""### 3- Escribe una función que tome una lista de palabras y una palabra objetivo como parámetros. La función debe devolver una lista con todas las palabras de la lista original que contengan la palabra objetivo."""

def objetivo(lista1, palabra_obj):
    """
    Función que recibirá una lista de palabras y una con una palabra objetivo, para que vaya añadiendo a una lista vacia
    las palabras que coincidan.
    Args:
        lista1(list): lista de palabras.
        palabra_obj(str): lista que contienen la palabra objetivo.
        lista2(list): lista vacia donde se iran añadiendo las palabras que coincidan con la palabra objetivo
    Returns:
        La lista2 con las palabras que coincidan añadidas a ella.
        str: Mensaje que nos indica que no hay coincidencias con ninguna palabra de la lista.
    """
    lista2 = []
    for palabra in lista1:
        if palabra_obj in palabra:
            lista2.append(palabra)
    if not lista2:
        return "No coincide ningún elemento"
    return lista2

# Ejemplo de uso
lista1 = ["perro", "gato", "perezoso", "supermercado", "pajaro", "periodico"]
palabra_obj = "per"

objetivo(lista1,palabra_obj)

"""### 4- Genera una función que calcule la diferencia entre los valores de dos listas. Usa la función *map()*"""

def diferencia_lista(lista1, lista2):
    """
    Función que calcula la diferencia entre los valores de dos listas.
    Args:
        lista1(int): primera lista de enteros.
        lista2(int): segunda lista de enteros.
    Returns:
        Una lista con los valores de la resta de cada elemento de lista1 - lista2.
    """
    if len(lista1) != len(lista2):
        raise ValueError('Las listas deben tener la misma longitud')
    diferencias = list(map(lambda x, y: x-y, lista1, lista2))

    return diferencias

# Ejemplo de uso
lista_a = [3, 5, 7, 8, 2, 12]
lista_b = [9, 6, 8, 1, 32, 4]

resultado = diferencia_lista(lista_a, lista_b)
print(resultado)

# Ejemplo de uso erroneo
lista_a = [3, 5, 7, 8, 2, 12]
lista_b = [9, 6, 8, 1, 32]
resultado = diferencia_lista(lista_a, lista_b)
print(resultado)

"""### 5- Escribe una función que tome una lista de números como parámetro y un valor opcional nota_aprobado, que por defecto es 5. La función debe calcular la media de los números en la lista y determinar si la media es mayor o igual que nota aprobado. Si es así, el estado será "aprobado", de lo contrario, será "suspenso". La función debe devolver una tupla que contenga la media y el estado.

"""

def saberNota(notas):
    """
    Función que recibirá una lista de números en la que haremos la media de distintas notas que contenga
    y nos dira si estamos aprobdos o suspensos.
    Args:
        notas(int): lista de enteros dada como parametro.
    Returns:
        Nos devolvera la nota media y un mensaje de 'aprobado' o 'suspenso' dependiendo de nuestro caso.
    """
    media = round(sum(notas) / len(notas), 2)
    if (media >= 5):
        estado ="Aprobado"
    else:
        estado= "Suspenso"
    return (media, estado)

# Ejemplo de media aprobado
notas = [5, 4, 7, 2, 8, 9]

saberNota(notas)

# Ejemplo de media suspensa
notas2 = [3, 7, 2, 1, 4]

saberNota(notas2)

"""### 6- Escribe una función que calcule el factorial de un número de manera recursiva.

"""

def factorial():
    """
    Función que pedira al usuario introducir un número por teclado para calcular su factorial.
    Args:
        num(int): número que introducira el usuario por teclado.
    Returns:
        Nos devolvera un mensaje indicandonos el número escrito y el factorial de el mismo.
    """
    num = int(input("Introduzca un número para calcular el factorial: "))
    factorial = 1
    i= 1
    while (i <= num):
        factorial = factorial * i
        i = i + 1
    print(f"El factorial de {num} es {factorial}")

factorial()

"""### 7- Genera una función que convierta una lista de tuplas a una lista de strings. Usa la función *map()*"""

def tuplasToStrings(lista_tuplas):
    """
    Función que nos pide una lista de tuplas para convertirla a una lista de strings.
    Args:
        lista_tuplas(list): una lista donde cada elemento es una tupla.
    Returns:
        list_strings: una lista de strings donde cada string es una concatenación de los elementos de las tuplas.
    """
    lista_strings = list(map(lambda x: " ".join(map(str, x)), lista_tuplas))
    return lista_strings

lista_tuplas = [(1, "Juan"), (2, "María"), (3, "Pedro")]

tuplasToStrings(lista_tuplas)

"""### 8- Escribe un programa que pida al usuario dos números e intente dividirlos. Si el usuario ingresa un valor no numérico o intenta dividir por cero, maneja esas excepciones de manera adecuada. Asegúrate de mostrar un mensaje indicando si la división fue exitosa o no."""

def divisionNumeros():
    """
    Función que recibirá dos números del usuario para calcular el resultado de la división.
    En este caso la conversión la realizamos después de comprobar si los dos números introducidos son números.
    Controlamos que no se introduzca algo que no sea un número o si se intenda dividir por 0.
    Args:
        n1(int): primer número (Dividendo).
        n2(int): segundo número (Divisor).
    Returns:
        Nos devolvera un mensaje con el resultado de la división de los dos números introducidos por el usuario.
    """
    n1 = input("Ingrese el primer número (dividendo) : ")
    n2 = input("Ingrese el segundo número (divisor): ")

    if not n1.isdigit() or not n2.isdigit():
        raise ValueError("ERROR: Esta intentado introducir un valor no númerico. ")
    n1 = int(n1)
    n2 = int(n2)
    if (n2) == 0:
        raise ZeroDivisionError("ERROR: Esta intentando dividir por 0. ")
    else:
        division = n1 / n2
        return (f"La división de {n1} y {n2} da como resultado: {division}")

divisionNumeros()

divisionNumeros()

divisionNumeros()

"""### 9- Escribe una función que tome una lista de nombres de mascotas como parámetro y devuelva una nueva lista excluyendo ciertas mascotas prohibidas en España. La lista de mascotas a excluir es ["Mapache", "Tigre", "Serpiente Pitón", "Cocodrilo", "Oso"].Usa la función filter()"""

def mascotas(lista_animales):
    """
    Función que recibirá por parametro una lista con nombres de animales, la cual si contiene alguno
    de los animales que no están permitidos los excluira y nos devolvera una lista sin ellos.
    Args:
        lista_animales(str): lista que contiene nombre de animales.
    Returns:
        Nos devolvera una nueva lista con los nombres de los animales que contenia la lista original
        y si están permitidos.
    """
    mas_prohibidas = {"Mapache", "Tigre", "Serpiente Pitón", "Cocodrilo", "Oso"}
    return list(filter(lambda mascota: mascota not in mas_prohibidas, lista_animales))

lista_animales = ["Perro", "Cocodrilo", "Gato", "Tigre", "Gorrión", "Serpiente Pitón", "Loro", "Oso", "Mapache"]

mascotas(lista_animales)

"""### 10- Escribe una función que reciba una lista de números y calcule su promedio. Si la lista está vacía, lanza una excepción personalizada y maneja el error adecuadamente.

"""

def calcular_promedio(lista_num):
    """
    Función que recibirá una lista de la cual nos devolvera su promedio, controlaremos que no
    se nos de una lista vacia usando ValueError el cual nos indicara un mensaje de error.
    Args:
        lista_num(int): lista de números (Tiene que contener algo, no puede estar vacia)
    Returns:
        Nos devolvera un mensaje con la media de los números que se encuentren en la lista.
    """
    if len(lista_num) == 0:
        raise ValueError('La lista esta vacia')
    else:
        return sum(lista_num) / len(lista_num)

# Ejemplo de uso
lista_num = [5, 7, 33, 5, 2]
resultado = calcular_promedio(lista_num)
print(f'El promedio de esta lista es {resultado}')

# Ejemplo de uso erroneo
lista_num = []
resultado = calcular_promedio(lista_num)
print(f'El promedio de esta lista es {resultado}')

"""### 11- Escribe un programa que pida al usuario que introduzca su edad. Si el usuario ingresa un valor no numérico o un valor fuera del rango esperado (por ejemplo, menor que 0 o mayor que 120, maneja las excepciones adecuadamente."""

def edadUsuario():
    """
    Función que pedira al usuario su edad, controlaremos por medio de mensajes de error que la edad no puede
    ser menor a 0 o mayor que 120 y que no introduzca una letra o signo debe ser un número entero.
    Args:
        edad(int): número entero que introduzca el usuario.
    Returns:
        Nos devolvera un mensaje con la edad introducida por el usuario.
    """
    while True:
        try:
            edad = int(input("Introduzca su edad por favor: "))

            if edad < 0 or edad > 120:
                print("ERROR, valor fuera del rango esperado")
                continue
            return edad

        except ValueError:
               print("ERROR, tiene que introducir un valor númerico")

edad_usuario = edadUsuario()
print(f"Gracias, su edad es: {edad_usuario} años.")

"""### 12- Genera una función que al recibir una frase devuelva una lista con la longitud de cada palabra. Usa la función *map()*"""

def devolver_lista(frase):
    """
    Función que nos devuelve una lista con la longitud de cada palabra de la frase que recibira.
    Args:
        frase(str): frase que recibe nuestra funcióm.
    Returns:
        Nos devolvera una lista con la longitud de cada palabra de la frase.
    """
    palabras = frase.split()
    longitudes = list(map(lambda x: len(x), palabras))
    if len(frase) == 0:
        raise ValueError('La lista esta vacia')
    else:
        return longitudes

# Variables que vamos a usar
frase_1 = 'El Madrid va a ganar la decimosexta'
frase_2 = 'Marc Márquez ficha por Ducati'

# Ejemplo de uso
print (f'La longitud de cada palabra en esta lista es: {devolver_lista(frase_1)}')
print (f'La longitud de cada palabra en esta lista es: {devolver_lista(frase_2)}')

"""### 13- Genera una función la cual, para un conjunto de caracteres, devuelva una lista de tuplas con cada letra en mayúsculas y minúsculas. Las letras no pueden estar repetidas .Usa la función *map()*"""

def listasMinMay(caracteres):
    caracteres_unicos = list(set(caracteres.lower()))
    return list(map(lambda c: (c.upper(), c.lower()), caracteres_unicos))

resultado = listasMinMay("CristianoRonaldo")
print(resultado)

"""### 14- Crea una función que retorne las palabras de una lista de palabras que comience con una letra en especifico. Usa la función filter()

"""

def palabrasLetEspec(lista1, letra_esp):
    lista2 = list(filter(lambda letra: letra_esp in letra, lista1))
    if not lista2:
        return "No hay coincidencias"
    return lista2

lista1 = ["Cristiano", "Messi", "Neymar", "Modric", "Ramos"]
letra_esp = "o"

print(palabrasLetEspec(lista1, letra_esp))

"""### 15- Crea una función lambda que sume 3 a cada número de una lista dada.

"""

x = [1, 2, 3, 4, 5, 6, 7]

funcion_lambda = lambda x: x + 3
list(map(funcion_lambda, x))

"""### 16- Esribe una función que tome una cadena de texto y un número entero n como parámetros y devuelva una lista de todas las palabras que sean más largas que n. Usa la función *filter()*"""

def palabrasN(cadena, num):
    """
    Función que nos devuelve las palabras de una cadena de caracteres que son más largas que el número dado.
    Args:
        cadena(str): frase que recibe nuestra funcióm.
        num(int): número que recibe nuestra función para comparar con cada palabra de la cadena.
    Returns:
        Nos devolvera una lista con las palabras cuya longitud es mayor que el número que hayamos puesto..
    """
    lista_palabras = cadena.split()
    lista2 = list(filter(lambda palabra: len(palabra) > num, lista_palabras))
    if not lista2:
        return "No hay palabras que sean más largas que el número dado"
    return lista2

# Ejemplo de prueba
lista = "Hola este es un ejemplo de prueba"
num = 4

palabrasN(lista, num)

"""### 17- Crea una función que tome una lista de dígitos y devuelva el número correspondiente. Por ejemplo, 5,7,2 corresponde al número quinientos setenta y dos 572. Usa la función *reduce()*"""

from functools import reduce

def listaToNumber(lista_digitos):
    numero_str = reduce(lambda x, y: str(x) + str(y), lista_digitos)
    numero = int(numero_str)
    return numero

lista_digitos = [5, 7, 2]

listaToNumber(lista_digitos)

"""### 18- Escribe un programa en Python que cree una lista de diccionarios que contenga información de estudiantes (nombre, edad, calificación) y use la función filter para extraer a los estudiantes con una calificación mayor o igual a 90. Usa la función filter()

"""

estudiantes = [
    {'nombre': "Ana" , 'edad': 25, 'calificacion': 65},
    {'nombre': "Gerardo" , 'edad': 22, 'calificacion': 95},
    {'nombre': "Antonio" , 'edad': 26, 'calificacion': 65},
    {'nombre': "Jose", 'edad': 21, 'calificacion': 90},
    {'nombre': "Laura" , 'edad': 30, 'calificacion': 100}
]

def infoEstudiante():
    estudiantes_destacados = list(filter(lambda estudiante: estudiante['calificacion'] >= 90, estudiantes))
    return estudiantes_destacados

infoEstudiante()

"""### 19- Crea una función lambda que filtre los números impares de una lista dada."""

import numpy as np
lista_numeros = np.random.randint(1, 101, 11).tolist()

print(lista_numeros)

filtrar_impares = list(filter(lambda i: i % 2 != 0, lista_numeros))

filtrar_impares

"""### 20- Para una lista con elementos tipo integer y string obtén una nueva lista sólo con los valores int. Usa la función *filter()*"""

def listOnlyInt(lista):
    lista2 = list(filter(lambda i: isinstance(i, int), lista))
    return lista2

# Ejemplo de uso
lista = [1, "Maria", 2, "Antonio", 3, "Jose"]

listOnlyInt(lista)

"""### 21- Crea una función que calcule el cubo de un número dado mediante una función *lamda*"""

def cuboNumero():
    try:
        num = int(input("Escriba el número del que quiera saber su resultado elevado al cubo: "))
        resultado_num = (lambda x: x**3) (num)
        print(f"El resultado de {num} elevado al cubo es: {resultado_num}")

    except ValueError:
        print("ERROR, no ha introducido ningun número")

cuboNumero()

cuboNumero()

"""### 22- Dada una lista numérica, obtén el producto total de los valores de dicha lista.Usa la función *reduce() .*"""

from functools import reduce

list_numeros = list(np.random.randint(1, 41, 11))

print(list_numeros)

producto_total = reduce(lambda x, y: x*y, list_numeros)

print(producto_total)

"""### 23- Concatena una lista de palabras.Usa la función *reduce() .*"""

from functools import reduce

def concLista(lista):
    lista2 = reduce(lambda x, y: str(x) + " " + str(y), lista)
    return lista2

# Ejemplo
lista = ["Hola", "que", "tal", "estas", "yo", "estoy", "trabajando"]

concLista(lista)

"""### 24- Calcula la diferencia total en los valores de una lista. Usa la función *reduce()* .

"""

from functools import reduce

def diferenciaTotal(listanum):
    resultado_total = reduce(lambda x, y: x - y , listanum)
    return resultado_total

listanum = [10, 2, 3, 1]

diferenciaTotal(listanum)

"""### 25- Crea una función que cuente el número de caracteres en una cadena de texto dada."""

def contCaracteres(cadena):
    """
    Función que nos cuenta el número de caracteres de una cadena dada como parámetro.
    Args:
        cadena(str): cadena de texto dada como parametro a la función.
    Returns:
        Nos devolvera el número de caractéres de la cadena de texto que le demos el cual guardamos en la variable
        "contar_palabras".
    """
    contar_cadena = len(cadena)
    return contar_cadena

# Ejemplo de uso
cadena = "En esta cadena vamos a contar el numero de caracteres"

print(f"El número de caracteres en esta cadena es: {contCaracteres(cadena)}")

"""### 26- Crea una función lambda que calcule el resto de la división entre dos números dados."""

resto = (lambda x, y: num1 % num2)

# Ejemplo de uso
num1 = 20
num2 = 8

print(f"El resto de {num1} dividido por {num2} es: {resto(num1, num2)}")

"""### 27- Crea una función que calcule el promedio de una lista de números.

"""

def promList(lista):
    """
    Función que calcula el promedio de una lista de números.
    Args:
        lista(int): lista de números dada como parametro a la función.
    Returns:
        Nos devolvera un mensaje con el resultado del promedio de la lista dada.
    """
    promedio_lista = round(sum(lista) / len(lista), 2)
    return print(f"El promedio de la lista de números dada es: {promedio_lista}")

lista = [4, 2, 7, 9, 22, 54]

promList(lista)

"""### 28- Crea una función que busque y devuelva el primer elemento duplicado en una lista dada."""

def elementoDuplicado(lista):
    elemento_lista = set()
    for elemento in lista:
        if elemento in elemento_lista:
            return elemento
        elemento_lista.add(elemento)
    if not elemento:
        return "No hay elementos duplicados en esta lista"

lista = ["fútbol", "baloncesto", "natación", "fútbol", "baloncesto"]

elementoDuplicado(lista)

"""### 29- Crea una función que convierta una variable en una cadena de texto y enmascare todos los caracteres con el carácter '#', excepto los últimos cuatro."""

def conversionCadenaTexto(variable):
    cadena_texto = str(variable)
    if len(cadena_texto) > 4:
        enmascarar = "#" * (len(cadena_texto) - 4)
        resultado = enmascarar + cadena_texto[-4:]
    else:
        resultado = cadena_texto

    return resultado

variable = "Andalucía"

conversionCadenaTexto(variable)

"""### 30- Crea una función que determine si dos palabras son anagramas, es decir, si están formadas por las mismas letras pero en diferente orden."""

def esAnagrama(pal1, pal2):
    """
    Función que tomara por parametros dos palabras para comprobar si son o no anagramas.
    Args:
        pal1(str): primera palabra.
        pal2(str): segunda palabra.
    Returns:
        Nos devolvera un mensaje indicando si son anagramas o no son anagramas las dos palabras que le hemos dado.
    """
    palabra1 = pal1.lower()
    palabra2 = pal2.lower()
    anagrama = sorted(palabra1) == sorted(palabra2)
    if anagrama == True:
        print(f"Las palabras {pal1} y {pal2} son anagramas")
    else:
        print(f"Las palabras {pal1} y {pal2} no son anagramas")

# Ejemplo de anagrama
pal1 = "Brasil"
pal2 = "Silbar"

esAnagrama(pal1,pal2)

# Ejemplo de palabras que no son anagramas
pal1 = "Brasil"
pal2 = "fiesta"

esAnagrama(pal1,pal2)

"""### 31- Crea una función que solicite al usuario ingresar una lista de nombres y luego solicite un nombre para buscar en esa lista. Si el nombre está en la lista, se imprime un mensaje indicando que fue encontrado, de lo contrario, se lanza una excepción.

"""

def listaNombres(nombres):
    """
    Función que pedira al usuario un nombre el cual comprobara si se encuentra en la lista que le da el usuario
    y si se encuentra en ella lo sabremos por un mensaje, si no lo esta nos saltara una excepción.
    Args:
        nombres(list): nombre que introduce el usuario por teclado para comprobar si se encuentra en la lista.
    Returns:
        str: Nos devolvera un mensaje confirmando si el nombre se encuentra en la lista
        Excepcion: Se lanza un ValueError si el nombre no se encuentra en la lista.
    """
    buscar_nombre = input("Introduzca el nombre que quiere comprobar si se encuentra en la lista: : ")
    nombres_lower= [nombre.lower() for nombre in nombres]

    if buscar_nombre.lower() in nombres_lower:
        print(f"{buscar_nombre} se encuentra en la lista")
    else:
        raise ValueError("Error, el nombre no se encuentra en la lista")

nombres = ["Gerardo", "Jose", "Manuel", "Maria", "Cristina", "Matias"]

# Ejemplo de uso
listaNombres(nombres)

# Ejemplo de uso erroneo
listaNombres(nombres)

"""### 32- Crea una función que tome un nombre completo y una lista de empleados, busque el nombre completo en la lista y devuelve el puesto del empleado si está en la lista, de lo contrario, devuelve un mensaje indicando que la persona no trabaja aquí.

"""

def buscar_empleado(nombre_completo, lista_empleados):
    for empleado in lista_empleados:
        if empleado["nombre"] == nombre_completo:
            return empleado["puesto"]
    return "La persona que está buscando no trabaja aquí."

empleados = [
    {"nombre": "Juan Perez", "puesto": "Gerente"},
    {"nombre": "Maria Lopez", "puesto": "Desarrolladora"},
    {"nombre": "Carlos Gomez", "puesto": "Analista"}
]

buscar_empleado("Maria Lopez", empleados)

"""### 33- Crea una función lambda que sume elementos correspondientes de dos listas dadas."""

sumar_lista = lambda lista_1, lista_2: list(map(lambda x, y: x + y, lista_1, lista_2))

lista_1 = [1, 2, 3, 4]
lista_2 = [10, 20, 30, 40]

sumar_lista(lista_1, lista_2)

"""### 34- Crea la clase Arbol , define un árbol genérico con un tronco y ramas como atributos. Los métodos disponibles son: *crecer_tronco* , *nueva_rama* , *crecer_ramas* , *quitar_rama e info_arbol* . El objetivo es implementar estos métodos para manipular la estructura del árbol.
### Código a seguir:
### 1. Inicializar un árbol con un tronco de longitud 1 y una lista vacía de ramas.
### 2. Implementar el método crecer_tronco para aumentar la longitud del tronco en una unidad.
### 3. Implementar el método nueva_rama para agregar una nueva rama de longitud 1 a la lista de ramas.
### 4. Implementar el método crecer_ramas para aumentar en una unidad la longitud de todas las ramas existentes.
### 5. Implementar el método quitar_rama para eliminar una rama en una posición específica.
### 6. Implementar el método info_arbol para devolver información sobre la longitud del tronco, el número de ramas y las longitudes de las mismas.

### Caso de uso:
### 1. Crear un árbol.
### 2. Hacer crecer el tronco del árbol una unidad.
### 3. Añadir una nueva rama al árbol.
### 4. Hacer crecer todas las ramas del árbol una unidad.
### 5. Añadir dos nuevas ramas al árbol.
### 6. Retirar la rama situada en la posición 2.
### 7. Obtener información sobre el árbol.


"""

class Arbol:
    def __init__(self):
        self.tronco = 1
        self.ramas = []


    def crecer_tronco(self):
        self.tronco += 1

    def nueva_rama(self):
        self.ramas.append(1)

    def crecer_ramas(self):
        self.ramas = [longitud + 1 for longitud in self.ramas]

    def quitar_rama(self, posicion):
        if 0 <= posicion < len(self.ramas):
            self.ramas.pop(posicion)
        else:
            print(f"No se puede quitar la rama: la posicion {posicion} no es válida.")

    def info_arbol(self):
        return(f'Longitud del tronco: {self.tronco}\n'
               f'Número de ramas: {len(self.ramas)}\n'
               f'Longitudes de las ramas: {self.ramas}')

# Caso de uso:
Carvajal = Arbol()

Carvajal.crecer_tronco()

Carvajal.tronco

Carvajal.nueva_rama()

Carvajal.ramas

Carvajal.crecer_ramas()

Carvajal.nueva_rama()
Carvajal.nueva_rama()

Carvajal.ramas

Carvajal.quitar_rama(2)

Carvajal.ramas

print(Carvajal.info_arbol())

"""### 36- Crea la clase UsuarioBanco ,representa a un usuario de un banco con su nombre, saldo y si tiene o no cuenta corriente. Proporciona métodos para realizar operaciones como retirar dinero, transferir dinero desde otro usuario y agregar dinero al saldo.
### Código a seguir:
### 1- Inicializar un usuario con su nombre, saldo y si tiene o no cuenta corriente mediante True y False .
### 2- Implementar el método retirar_dinero para retirar dinero del saldo del usuario. Lanzará un error en caso de no poder hacerse.
### 3- Implementar el método transferir_dinero para realizar una transferencia desde otro usuario al usuario actual. Lanzará un error en caso de no poder hacerse.
### 4- Implementar el método agregar_dinero para agregar dinero al saldo del usuario.
### Caso de uso:
### 1- Crear dos usuarios: "Alicia" con saldo inicial de 100 y "Bob" con saldo inicial de 50, ambos con cuenta corriente.
### 2- Agregar 20 unidades de saldo de "Bob".
### 3- Hacer una transferencia de 80 unidades desde "Bob" a "Alicia".
### 4- Retirar 50 unidades de saldo a "Alicia".


"""

class UsuarioBanco:
    def __init__(self, nombre, saldo, cuenta_corriente):
        self.nombre = nombre
        self.saldo = saldo
        self.cuenta_corriente = cuenta_corriente

    def retirar_dinero(self, cantidad):
        if cantidad > self.saldo:
            raise ValueError ("ERROR, fondos insuficientes para retirar")
        self.saldo -= cantidad
        return f"{self.nombre}, ha retirado {cantidad}, saldo restante: {self.saldo}"

    def transferir_dinero(self, otro_usuario, cantidad):
        if cantidad > otro_usuario.saldo:
            raise ValueError ("ERROR, fondos insuficientes para retirar")
        otro_usuario.saldo -= cantidad
        self.saldo += cantidad
        return f"{otro_usuario.nombre}, ha transferido {cantidad} a {self.nombre}, nuevo saldo: {self.saldo}"

    def agregar_dinero(self, cantidad):
        self.saldo += cantidad
        return f"Se ha sumado {cantidad} al saldo de {self.nombre}, saldo actual: {self.saldo}"

alicia = UsuarioBanco("Alicia", 100, True)
bob = UsuarioBanco("Bob", 50, True)

bob.agregar_dinero(20)

bob.transferir_dinero(alicia, 80)

alicia.retirar_dinero(20)

"""### 37- Crea una función llamada procesar_texto que procesa un texto según la opción especificada: contar_palabras , reemplazar_palabras , eliminar_palabra . Estas opciones son otras funciones que tenemos que definir primero y llamar dentro de la función procesar_texto .
### Código a seguir:
### 1- Crear una función contar_palabras para contar el número de veces que aparece cada palabra en el texto. Tiene que devolver un diccionario.
###  2- Crear una función reemplazar_palabras para remplazar una palabra_original del texto por una palabra_nueva . Tiene que devolver el texto con el remplazo de palabras.
### 3- Crear una función eliminar_palabra para eliminar una palabra del texto. Tiene que devolver el texto con la palabra eliminada.
### 4- Crear la función procesar_texto que tome un texto, una opción(entre "contar", "reemplazar", "eliminar") y un número de argumentos variable según la opción indicada.
### Caso de uso: Comprueba el funcionamiento completo de la función procesar_texto
"""

from collections import Counter

def contar_palabras(texto):
    palabras = texto.lower().split()
    return dict(Counter(palabras))

def reemplazar_palabras(texto, palabra_original, palabra_nueva):
    return texto.replace(palabra_original, palabra_nueva)

def eliminar_palabra(texto, palabra_eliminada):
    palabras = texto.split()
    palabras_filtro = [palabra for palabra in palabras if palabra != palabra_eliminada]
    return " ".join(palabras_filtro)


def procesar_texto(texto, opcion, *args):
    if opcion == "contar":
        return contar_palabras(texto)
    elif opcion == "reemplazar" and len(args) == 2:
        return reemplazar_palabras(texto, args[0], args[1])
    elif opcion == "eliminar" and len(args) == 1:
        return eliminar_palabra(texto, args[0])
    else:
        raise ValueError ("ERROR, opción no válida, por favor use contar, reemplazar o eliminar")

texto = "Python es un lenguaje de programación muy popular. Python es utilizado para desarrollo web, ciencia de datos, inteligencia artificial y más. Muchos desarrolladores prefieren Python por su simplicidad y versatilidad."

procesar_texto(texto, "contar")

procesar_texto(texto, "reemplazar", "Python", "Java")

procesar_texto(texto, "eliminar", "Python")

procesar_texto(texto, "contar_palabra")

"""### 38. Genera un programa que nos diga si es de noche, de día o tarde según la hora proporcionada por el usuario."""

def determinar_momento_dia(hora):
    if (0 <= hora <= 5) or (hora >= 20):
        return "Noche"
    elif (6 <= hora < 12):
        return "Día"
    elif (12 <= hora < 20):
        return "Tarde"
    else:
        return "Hora inválida"

while True:
    try:
        hora_usuario = int(input("Introduzca la hora (0-23): "))
        if 0 <= hora_usuario <= 23:
            resultado = determinar_momento_dia(hora_usuario)
            print(f"Es {resultado.lower()} según la hora proporcionada.")
            break
        else:
            print("Por favor, introduce un número entre 0 y 23.")
    except ValueError:
        print("Error, por favor, introduce un número entero válido.")

"""### 39- Escribe un programa que determine qué calificación en texto tiene un alumno en base a su calificación numérica. Las reglas de calificación son:  0-69 insuficiente, 70-79 bien, 80-89 muy bien y 90-100 excelente"""

def calificacionAlumno():
    calificacion = int(input("Introduzca la calificación del alumno: "))
    if 0 <= calificacion < 70:
        return "Insuficiente"
    elif 70 <= calificacion < 80:
        return "Bien"
    elif 80 <= calificacion < 90:
        return "Muy Bien"
    elif 90 <= calificacion < 101:
        return "Excelente"
    else:
        return "Introduzca un número del 0 al 100"

calificacionAlumno()

calificacionAlumno()

calificacionAlumno()

calificacionAlumno()

"""### 40- Escribe una función que tome dos parámetros: figura (una cadena que puede ser "rectangulo" , "circulo" o "triangulo" ) y datos (una tupla con los datos necesarios para calcular el área de la figura).

"""

import math

def calcular_area(figura, datos):
    figura = figura.lower()
    if figura == "rectangulo":
        if len(datos) == 2:
            base, altura = datos
            return base * altura
        else:
            raise ValueError("Para un rectángulo se necesitan 2 valores: base y altura.")

    elif figura == "circulo":
        if len(datos) == 1:
            radio = datos[0]
            return math.pi * radio ** 2
        else:
            raise ValueError("Para un círculo se necesita 1 valor: radio.")

    elif figura == "triangulo":
        if len(datos) == 2:
            base, altura = datos
            return (base * altura) / 2

        else:
            raise ValueError("Para un triángulo se necesitan 2 valor: base y altura.")

    else:
        raise ValueError("Figura no reconocida. Utiliza 'rectangulo', 'circulo' o 'triangulo'.")

print(calcular_area("rectangulo",(3,5)))

print(calcular_area("circulo",(7,)))

print(calcular_area("triangulo",(6,7)))

print(calcular_area("Pentagono",(3,5)))

"""### 41- En este ejercicio, se te pedirá que escribas un programa en Python que utilice condicionales para determinar el monto final de una compra en una tienda en línea, después de aplicar un descuento. El programa debe hacer lo siguiente:
### 1. Solicita al usuario que ingrese el precio original de un artículo.
### 2. Pregunta al usuario si tiene un cupón de descuento (respuesta sí o no).
### 3. Si el usuario responde que sí, solicita que ingrese el valor del cupón de descuento.
### 4. Aplica el descuento al precio original del artículo, siempre y cuando el valor del cupón sea válido (es decir, mayor a cero). Por ejemplo, descuento de 15€.
### 5. Muestra el precio final de la compra, teniendo en cuenta el descuento aplicado o sin él.
### 6. Recuerda utilizar estructuras de control de flujo como if, elif y else para llevar a cabo estas acciones en tu programa de Python.
"""

def tiendaOnline():
    # Validamos la entrada del precio original
    while True:
        try:
            precio_original = int(input("Por favor, introduzca el precio original del artículo: "))
            if precio_original > 0:
                break
            else:
                print("ERROR, el precio debe ser mayor que 0.")
        except ValueError:
           print("ERROR, Por favor, introduzca un número válido.")

    # Validar si tiene cupón
    while True:
        try:
            cupon_desc = int(input("¿Tiene cupón de descuento?(1-si / 2-no): "))
            if cupon_desc in [1, 2]:
               break
            else:
                print("Error: Por favor, introduzca 1 o 2.")
        except ValueError:
            print("ERROR, introduzca un número valido (1 o 2)")

    # Comprobamos que en caso de tener cupón lo introduca de manera correcta
    if cupon_desc == 1:
        while True:
            try:
                valor_cupon= int(input("Ingrese el valor del cupón descuento: "))
                if 0 <= valor_cupon <= precio_original:
                    precio_con_descuento = precio_original - valor_cupon
                    break
                else:
                    print(f"ERROR, el cupón debe tener un valor entre 0 y {precio_original}")
            except ValueError:
                print("ERROR, introduzca un número válido")

    else:
        print("Una lastima que no tenga cupón descuento")
        precio_con_descuento = precio_original

    print(f"--- Muchas gracias por su compra!!! ---\nEl precio final de la compra es: {precio_original}€")
    if cupon_desc == 1:
        print(f"El precio final de la compra con descuento es: {precio_con_descuento}€")

    return

# Ejemplos de uso
tiendaOnline()

tiendaOnline()